#Область ИнтеграцияВизио

#Область ПрограммныйИнтерфейс

&НаСервере
Процедура СместитьСвойстваФигуры(Элемент, ИндексНафигуре) Экспорт
	
	ИндексНовый = ИндексНафигуре-1;
	Если ИндексНовый=1 Тогда 
		
		ЗначениеСвойства = ПолучитьЗначениеСвойства(Элемент, "Connections.AutoGen["+Строка(ИндексНафигуре)+"]");
		ИзменитьСвойствоФигуры(Элемент, "Connections.AutoGen", ЗначениеСвойства);
		УдалитьСвойствоФигуры(Элемент, "Connections.AutoGen["+Строка(ИндексНафигуре)+"]");
		
		ЗначениеСвойства = ПолучитьЗначениеСвойства(Элемент, "Connections.DirX["+Строка(ИндексНафигуре)+"]");
		ИзменитьСвойствоФигуры(Элемент, "Connections.DirX", ЗначениеСвойства);
		УдалитьСвойствоФигуры(Элемент, "Connections.DirX["+Строка(ИндексНафигуре)+"]");
		
		ЗначениеСвойства = ПолучитьЗначениеСвойства(Элемент, "Connections.DirY["+Строка(ИндексНафигуре)+"]");
		ИзменитьСвойствоФигуры(Элемент, "Connections.DirY", ЗначениеСвойства);
		УдалитьСвойствоФигуры(Элемент, "Connections.DirY["+Строка(ИндексНафигуре)+"]");
		
		ЗначениеСвойства = ПолучитьЗначениеСвойства(Элемент, "Connections.Prompt["+Строка(ИндексНафигуре)+"]");
		ИзменитьСвойствоФигуры(Элемент, "Connections.Prompt", ЗначениеСвойства);
		УдалитьСвойствоФигуры(Элемент, "Connections.Prompt["+Строка(ИндексНафигуре)+"]");
		
	Иначе
		
		ЗначениеСвойства = ПолучитьЗначениеСвойства(Элемент, "Connections.AutoGen["+Строка(ИндексНафигуре)+"]");
		ИзменитьСвойствоФигуры(Элемент, "Connections.AutoGen["+Строка(ИндексНовый)+"]", ЗначениеСвойства);
		УдалитьСвойствоФигуры(Элемент, "Connections.AutoGen["+Строка(ИндексНафигуре)+"]");
		
		ЗначениеСвойства = ПолучитьЗначениеСвойства(Элемент, "Connections.DirX["+Строка(ИндексНафигуре)+"]");
		ИзменитьСвойствоФигуры(Элемент, "Connections.DirX["+Строка(ИндексНовый)+"]", ЗначениеСвойства);
		УдалитьСвойствоФигуры(Элемент, "Connections.DirX["+Строка(ИндексНафигуре)+"]");
		
		ЗначениеСвойства = ПолучитьЗначениеСвойства(Элемент, "Connections.DirY["+Строка(ИндексНафигуре)+"]");
		ИзменитьСвойствоФигуры(Элемент, "Connections.DirY["+Строка(ИндексНовый)+"]", ЗначениеСвойства);
		УдалитьСвойствоФигуры(Элемент, "Connections.DirY["+Строка(ИндексНафигуре)+"]");
		
		ЗначениеСвойства = ПолучитьЗначениеСвойства(Элемент, "Connections.Prompt["+Строка(ИндексНафигуре)+"]");
		ИзменитьСвойствоФигуры(Элемент, "Connections.Prompt["+Строка(ИндексНовый)+"]", ЗначениеСвойства);
		УдалитьСвойствоФигуры(Элемент, "Connections.Prompt["+Строка(ИндексНафигуре)+"]");
		
	КонецЕсли;
	
	ЗначениеСвойства = ПолучитьЗначениеСвойства(Элемент, "Connections.X"+Строка(ИндексНафигуре));
	ИзменитьСвойствоФигуры(Элемент, "Connections.X"+Строка(ИндексНовый), ЗначениеСвойства);
	УдалитьСвойствоФигуры(Элемент, "Connections.X"+Строка(ИндексНафигуре));
	
	ЗначениеСвойства = ПолучитьЗначениеСвойства(Элемент, "Connections.Y"+Строка(ИндексНафигуре)+"]");
	ИзменитьСвойствоФигуры(Элемент, "Connections.Y"+Строка(ИндексНовый), ЗначениеСвойства);
	УдалитьСвойствоФигуры(Элемент, "Connections.Y"+Строка(ИндексНафигуре));

КонецПроцедуры

&НаСервере
Процедура СместитьИндексыНаФигуре(Точка, Элемент, Индекс) Экспорт
	
	РегистрыСведений.ИнтеграцияВизиоСтруктураСвязей.УдалитьЗапись(Точка, Элемент, Индекс);
	
	Если Индекс=1 Тогда 
		
		ИнтеграцияВизиоСервер.УдалитьСвойствоФигуры(Элемент, "Connections.AutoGen");
		ИнтеграцияВизиоСервер.УдалитьСвойствоФигуры(Элемент, "Connections.DirX");
		ИнтеграцияВизиоСервер.УдалитьСвойствоФигуры(Элемент, "Connections.DirY");
		ИнтеграцияВизиоСервер.УдалитьСвойствоФигуры(Элемент, "Connections.Prompt");
		
	Иначе
		
		ИнтеграцияВизиоСервер.УдалитьСвойствоФигуры(Элемент, "Connections.AutoGen["+Строка(Индекс)+"]");
		ИнтеграцияВизиоСервер.УдалитьСвойствоФигуры(Элемент, "Connections.DirX["+Строка(Индекс)+"]");
		ИнтеграцияВизиоСервер.УдалитьСвойствоФигуры(Элемент, "Connections.DirY["+Строка(Индекс)+"]");
		ИнтеграцияВизиоСервер.УдалитьСвойствоФигуры(Элемент, "Connections.Prompt["+Строка(Индекс)+"]");
		
	КонецЕсли;
	
	ИнтеграцияВизиоСервер.УдалитьСвойствоФигуры(Элемент, "Connections.X"+Строка(Индекс));
	ИнтеграцияВизиоСервер.УдалитьСвойствоФигуры(Элемент, "Connections.Y"+Строка(Индекс));
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СтруктураСвязей.Индекс, 0) КАК Индекс,
	|	СтруктураСвязей.Точка,
	|	СтруктураСвязей.Элемент
	|ИЗ
	|	РегистрСведений.ИнтеграцияВизиоСтруктураСвязей.СрезПоследних(
	|			,) КАК СтруктураСвязей
	|ГДЕ
	|	СтруктураСвязей.Элемент = &Элемент
	|	И СтруктураСвязей.Индекс > &Индекс
	|
	|УПОРЯДОЧИТЬ ПО
	|	Индекс
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Элемент", Элемент);
	Запрос.УстановитьПараметр("Индекс", Индекс);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//сдвиг по индексу
		РегистрыСведений.ИнтеграцияВизиоСтруктураСвязей.ДобавитьЗапись(Выборка.Точка, Выборка.Элемент, Выборка.Индекс-1);
		
		РегистрыСведений.ИнтеграцияВизиоСтруктураСвязей.УдалитьЗапись(Выборка.Точка, Выборка.Элемент, Выборка.Индекс);
		
		//сдвиг по свойствам
		СместитьСвойстваФигуры(Выборка.Элемент, Выборка.Индекс);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДанные(СтруктураПараметров, Адрес = Неопределено) Экспорт
		
	ПоместитьВоВременноеХранилище(Неопределено, Адрес);
	
	ДанныеЗаполнения = ПолучитьДанныеПоСхеме(СтруктураПараметров.Схема); 
	
	ПоместитьВоВременноеХранилище(ДанныеЗаполнения, Адрес);
	
КонецПроцедуры

&НаСервере
Функция МассивТиповЛиний() Экспорт
	
	МассивТиповЛиний = Новый Массив;
	
	МассивТиповЛиний.Добавить("Линия");
	МассивТиповЛиний.Добавить("Динамическая соединительная линия");
	МассивТиповЛиний.Добавить("Кривая соединительная линия");
	МассивТиповЛиний.Добавить("Dynamic connector");
	МассивТиповЛиний.Добавить("Line-curve connector");
	
	Возврат МассивТиповЛиний;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеПоСхеме(Схема, ОбновлятьКэш=Ложь) Экспорт
	
	КлиентскийКэш = Неопределено;
	
	//задумка автора:
	//да такое может быть, что нет серверного кэша, но есть клиентский
	//например не давно открывали схему, и потом закрыли
	//при заккрытии схемы может быть клиентский кэш но серверного уже нет (редактировали из конструктора, потом успешно закрыли)
	
	//в данном случае гарантируется что клиентский актуален
	
	//что касается судьбы серверного кэша то ниже скажем что его нет, и созданим его там
	
	//право сохранения клиентского кэша только у редактора схемы, и при условии что схема не заблокирована
	//сохранение клиентского кэша у всех пользователей возможно приведет к рассинхронизации кэшей
	//в случае редактирования схемы ставится мьютекс, что гарантирует запирание объекта от внешнего воздействия (остальные только на просмотр)
	//см СохранитьКлиентскийКэшВБазуДанных (клиент)
	
	//если редактирование схнмы было произведено не из конструктора, то там убивается и клиентский тоже
	//см ОбновитьСерверныйКэш (сервер)
	
	КлиентскийКэш = ПолучитьКлиентскийКэш(Схема); 
	
	Если Не ОбновлятьКэш Тогда 
		
		ДанныеЗаполнения = ПолучитьСерверныйКэш(Схема);
		Если Не ДанныеЗаполнения=Неопределено Тогда 
			
			ДанныеЗаполнения.Вставить("КлиентскийКэш", КлиентскийКэш);
			
			Возврат ДанныеЗаполнения;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//МассивТиповЛиний = МассивТиповЛиний();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Схема", Схема);
	//Запрос.УстановитьПараметр("МассивТиповЛиний", МассивТиповЛиний);
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ИнтеграцияВизиоФигурыОбъектов.Элемент КАК Элемент
	|ПОМЕСТИТЬ втФигуры
	|ИЗ
	|	РегистрСведений.ИнтеграцияВизиоФигурыОбъектов.СрезПоследних(, Объект = &Схема) КАК ИнтеграцияВизиоФигурыОбъектов
	|ГДЕ
	|	НЕ ИнтеграцияВизиоФигурыОбъектов.Элемент.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Элемент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""PinY"" КАК Свойство,
	|	ЕСТЬNULL(ИнтеграцияВизиоЗначенияСвойствФигурСрезПоследних.Значение, ""0 мм"") КАК Значение
	|ИЗ
	|	втФигуры КАК втФигуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнтеграцияВизиоЗначенияСвойствФигур.СрезПоследних(
	|				,
	|				Свойство = ЗНАЧЕНИЕ(Перечисление.ИнтеграцияВизиоСвойстваФигур.PinY)
	|					И Значение ПОДОБНО ""%мм%"") КАК ИнтеграцияВизиоЗначенияСвойствФигурСрезПоследних
	|		ПО втФигуры.Элемент = ИнтеграцияВизиоЗначенияСвойствФигурСрезПоследних.Элемент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""PinX"" КАК Свойство,
	|	ЕСТЬNULL(ИнтеграцияВизиоЗначенияСвойствФигурСрезПоследних.Значение, ""0 мм"") КАК Значение
	|ИЗ
	|	втФигуры КАК втФигуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнтеграцияВизиоЗначенияСвойствФигур.СрезПоследних(
	|				,
	|				Свойство = ЗНАЧЕНИЕ(Перечисление.ИнтеграцияВизиоСвойстваФигур.PinX)
	|					И Значение ПОДОБНО ""%мм%"") КАК ИнтеграцияВизиоЗначенияСвойствФигурСрезПоследних
	|		ПО втФигуры.Элемент = ИнтеграцияВизиоЗначенияСвойствФигурСрезПоследних.Элемент
	|ГДЕ
	|	ИнтеграцияВизиоЗначенияСвойствФигурСрезПоследних.Значение ПОДОБНО ""%мм%""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втФигуры.Элемент КАК Элемент
	|ИЗ
	|	втФигуры КАК втФигуры";

	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	ВыбратьЗначенийPinY = ПакетЗапросов[1].Выбрать();
	ВыбратьЗначенийPinX = ПакетЗапросов[2].Выбрать();
	ВыборкаФигуры =  ПакетЗапросов[3].Выбрать();
	
	ДанныеЗаполнения = Новый Структура;
	
	#Область СозданныеФигуры
	
	СозданныеФигуры = Новый Соответствие;
	
	Пока ВыборкаФигуры.Следующий() Цикл
		
		СтруктураФигуры = СоздатьСтруктуруФигуры(ВыборкаФигуры.Элемент, Схема);
		Если СтруктураФигуры=Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		СозданныеФигуры.Вставить(СтруктураФигуры.Data1, СтруктураФигуры);
		
		//ЗаполнитьПодчиненныеЭлементы(СтруктураФигуры, СозданныеФигуры);
		
	КонецЦикла;

	#Область СчетчикиСсылок
	
	Для Каждого ТекСтрокаФигур Из СозданныеФигуры Цикл
		
		СтруктураФигуры = ТекСтрокаФигур.Значение; 
		
		Для Каждого ТекСтрока Из СтруктураФигуры.МассивСвязей Цикл
			
			СсылкаНаЭлемент = СозданныеФигуры[ТекСтрока.Элемент]; 
			Если СсылкаНаЭлемент=Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			СчетчикиСсылок = СсылкаНаЭлемент.СчетчикиСсылок;
			
			СчетчикиСсылок.Добавить(СтруктураФигуры.Data1);
			
		КонецЦикла;
		
		//СтруктураФигуры.СчетчикиСсылок.Добавить(СтруктураФигуры.Data1); 
		
	КонецЦикла;
	
	ДанныеЗаполнения.Вставить("СозданныеФигуры", СозданныеФигуры);
	
	#КонецОбласти 
	
	#КонецОбласти 
	
	#Область НеСохранятьИзмененияПоСхеме

	НеСохранятьИзмененияПоСхеме = ТолькоЧтение(Схема);
	
	ДанныеЗаполнения.Вставить("НеСохранятьИзмененияПоСхеме", НеСохранятьИзмененияПоСхеме); 
	
	#КонецОбласти 
	
	#Область ЗначениеY_ЗначениеX
	
	МаксPinY = Новый ТаблицаЗначений;
	МаксPinY.Колонки.Добавить("Значение");
	
	Пока ВыбратьЗначенийPinY.Следующий() Цикл
		
		Попытка
			ЧисловоеЗначение = Число(Лев(ВыбратьЗначенийPinY.Значение, СтрДлина(ВыбратьЗначенийPinY.Значение)-2));
		Исключение
			Продолжить;
		КонецПопытки;
		
		Нстрока = МаксPinY.Добавить();
		Нстрока.Значение = ЧисловоеЗначение;
		
	КонецЦикла;
	
	МаксPinX = Новый ТаблицаЗначений;
	МаксPinX.Колонки.Добавить("Значение");
	
	Пока ВыбратьЗначенийPinX.Следующий() Цикл

		Попытка
			ЧисловоеЗначение = Число(Лев(ВыбратьЗначенийPinX.Значение, СтрДлина(ВыбратьЗначенийPinX.Значение)-2));
		Исключение
			Продолжить;
		КонецПопытки;
		
		Нстрока = МаксPinX.Добавить();
		Нстрока.Значение = ЧисловоеЗначение;
		
	КонецЦикла;
	
	МаксPinX.Сортировать("Значение УБЫВ");
	МаксPinY.Сортировать("Значение УБЫВ");
	
	Попугай = 22; //условный делитель 
	ЗначениеX = 50;  
	ЗначениеY = 30;
	
	Если МаксPinY.Количество()>0 Тогда 
		ЗначениеY = Окр(МаксPinY[0].Значение/Попугай);
	КонецЕсли;
	
	Если МаксPinX.Количество()>0 Тогда 
		ЗначениеX = Окр(МаксPinX[0].Значение/Попугай);
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("ЗначениеY", Строка(ЗначениеY)); 
	ДанныеЗаполнения.Вставить("ЗначениеX", Строка(ЗначениеX)); 
	
	#КонецОбласти 
	
	МассивАктивныхСвойств =  ПолучитьМассивСвойств(Ложь); 
	
	АктивныеСвойства = Новый Соответствие;
	Для Каждого ТекСтрока Из МассивАктивныхСвойств Цикл
		
		АктивныеСвойства.Вставить(ТекСтрока, Истина);
		
	КонецЦикла;
	
	ДанныеЗаполнения.Вставить("АктивныеСвойства", АктивныеСвойства);
	
	ДанныеЗаполнения.Вставить("КлиентскийКэш", КлиентскийКэш);
	
	ОбновитьСерверныйКэш(Схема, ДанныеЗаполнения);	
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

&НаСервере
Процедура ОбновитьСерверныйКэш(Схема, Кэш=Неопределено) Экспорт
	
	Если Кэш=Неопределено Тогда 
		
		РегистрыСведений.ИнтеграцияВизиоСерверныйКэш.УдалитьЗапись(Схема);

	Иначе
		
		РегистрыСведений.ИнтеграцияВизиоСерверныйКэш.ДобавитьЗапись(Схема, Новый ХранилищеЗначения(Кэш));
		
	КонецЕсли;
	
	//если серверный устарел, скидываем клиентский
	ОбновитьКлиентскийКэш(Схема, Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКлиентскийКэш(Схема, Кэш=Неопределено) Экспорт
	
	Если Кэш=Неопределено Тогда 
		
		РегистрыСведений.ИнтеграцияВизиоКлиентскийКэш.УдалитьЗапись(Схема);

	Иначе
		
		РегистрыСведений.ИнтеграцияВизиоКлиентскийКэш.ДобавитьЗапись(Схема, Новый ХранилищеЗначения(Кэш));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКлиентскийКэш(Схема) Экспорт 
	
	КлиентскийКэш = Неопределено;
	
	КэшСхемы = РегистрыСведений.ИнтеграцияВизиоКлиентскийКэш.ПолучитьКешСхемы(Схема);
	Если Не КэшСхемы=Неопределено Тогда 
		
		КлиентскийКэш = КэшСхемы.Получить();
		
		Возврат КлиентскийКэш;
		
	КонецЕсли;	
	
	Возврат КлиентскийКэш;
	
КонецФункции

&НаСервере
Функция ПолучитьСерверныйКэш(Схема) Экспорт 
	
	КэшСхемы = РегистрыСведений.ИнтеграцияВизиоСерверныйКэш.ПолучитьКешСхемы(Схема);
	Если Не КэшСхемы=Неопределено Тогда 
		
		ДанныеЗаполнения = КэшСхемы.Получить();
		
		Возврат ДанныеЗаполнения;
		
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПолучитьМассивОтбора()
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПолучитьМассивСвойств(ВернутьСсылки=Истина)
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ
	|	#ПолеВыборки
	|ИЗ
	|	Перечисление.ИнтеграцияВизиоСвойстваФигур КАК ИнтеграцияВизиоСвойстваФигур";
	
	Если ВернутьСсылки Тогда 
		
		ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#ПолеВыборки", "ИнтеграцияВизиоСвойстваФигур.Ссылка КАК Ссылка");
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#ПолеВыборки", "ПРЕДСТАВЛЕНИЕ(ИнтеграцияВизиоСвойстваФигур.Ссылка) КАК Ссылка");
		
	КонецЕсли;
	
	МассивОтбора = ПолучитьМассивОтбора();
	
	Запрос = Новый Запрос;
	
	Если Не МассивОтбора=Неопределено Тогда 
		
		ТекстЗапроса = ТекстЗапроса +"
		|ГДЕ
		|	Не ИнтеграцияВизиоСвойстваФигур.Ссылка В (&МассивОтбора)";
		
		Запрос.УстановитьПараметр("МассивОтбора", МассивОтбора);
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	МассивСвойств = РезультатЗапроса.ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивСвойств;
	
КонецФункции

&НаСервере
Функция ФормаЭлемента(Фигура) Экспорт
	
	ФормаЭлемента = Неопределено;
	
	ТекЗначение = Фигура.Значение;
	
	Если ЗначениеЗаполнено(ТекЗначение) Тогда 
		
		ТекТипЗнч = ТипЗнч(ТекЗначение);
		
		Если ТекТипЗнч=Тип("СправочникСсылка.Опоры") Тогда
			
			ФормаЭлемента = "Справочник.Опоры.Форма.ФормаЭлемента";
			
		ИначеЕсли ТекТипЗнч=Тип("СправочникСсылка.УзлыСети") Тогда 
			
			ФормаЭлемента = "Справочник.УзлыСети.Форма.ФормаЭлемента";
			
		ИначеЕсли ТекТипЗнч=Тип("СправочникСсылка.ПроизвольныеТочкиУзлаСети") Тогда 
			
			ФормаЭлемента = "Справочник.ПроизвольныеТочкиУзлаСети.Форма.ФормаЭлемента";
			
		ИначеЕсли ТекТипЗнч=Тип("СправочникСсылка.УчасткиВоздушныхЛиний") Тогда 
			
			ФормаЭлемента = "Справочник.УчасткиВоздушныхЛиний.Форма.ФормаЭлемента";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ФормаЭлемента;
	
КонецФункции

&НаСервере
Функция ДополнитьПредставление(Фигура)
	
	Представление = "";
	
	Если Фигура=Неопределено Тогда 
		Возврат Представление;
	КонецЕсли;
	
	Значение = Фигура.Значение;
	
	Если ТипЗнч(Значение)=Тип("СправочникСсылка.Опоры") Тогда 
		
		Представление = Представление+" ("+Значение.УзелСети+", "+Значение.ИнвентарныйНомер+")";
		
	ИначеЕсли ТипЗнч(Значение)=Тип("СправочникСсылка.УзлыСети") Тогда 
		
		Представление = Представление+" ("+Значение.Участок+")";
		
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПодчиненныеЭлементы(СтруктураФигуры, СозданныеФигуры)
	
	Фигура = СтруктураФигуры.Отображение;
	
	ТекЗначение = Фигура.Значение;
	Если Не ЗначениеЗаполнено(ТекЗначение) Тогда 
		Возврат;
	КонецЕсли;
	
	ТекТип = ТипЗнч(ТекЗначение);
	Если ТекТип=Тип("СправочникСсылка.Опоры") Тогда 
	
		#Область ПоложениеХ_ПоложениеY
		
		МассивСвойствРодителя = СтруктураФигуры.МассивСвойств;
		
		ПоложениеХ = 0;
		ПоложениеY = 0;
		
		Для Каждого ТекСтрока Из МассивСвойствРодителя Цикл
			
			ЗначениеСвойства = ТекСтрока.Значение;
			Если ТекСтрока.ИмяСвойства="PinX" Тогда 
				
				ПоложениеХ = Число(Лев(ЗначениеСвойства, СтрДлина(ЗначениеСвойства)-2))
				
			ИначеЕсли ТекСтрока.ИмяСвойства="PinY" Тогда  
				
				ПоложениеY = Число(Лев(ЗначениеСвойства, СтрДлина(ЗначениеСвойства)-2))
				
			КонецЕсли;
			
		КонецЦикла;
		
		#КонецОбласти
		
		#Область Заземление
		
		Если ТекЗначение.Заземление Тогда 
			
			СтруктураФигурыПодч = ОписаниеФигуры();
			
			СтруктураФигурыПодч.Отображение = Фигура;
			СтруктураФигурыПодч.ИмяТипа = "Заземление";
			СтруктураФигурыПодч.Data1 = "Заземление_" + СтруктураФигуры.Data1;
			СтруктураФигурыПодч.Data2 = СтруктураФигуры.Data2;
			СтруктураФигурыПодч.ПоложениеХ = СтрЗаменить(Строка(0+ПоложениеХ)+" мм", Символы.НПП, "");
			СтруктураФигурыПодч.ПоложениеY = СтрЗаменить(Строка(-8+ПоложениеY)+" мм", Символы.НПП, "");
			СтруктураФигурыПодч.Значение = ТекЗначение;
			СтруктураФигурыПодч.РодительскийЭлемент = СтруктураФигуры.Data1;			
			
			СтруктураФигуры.ПодчиненныеЭлементы.Добавить(СтруктураФигурыПодч.Data1);
			
			СозданныеФигуры.Вставить(СтруктураФигурыПодч.Data1, СтруктураФигурыПодч);
			
		КонецЕсли;
		
		#КонецОбласти
		
		#Область ТипРазъединителя
		
		ТипРазъединителя = ТекЗначение.ТипРазъединителя;	
		Если Не ТипРазъединителя.Пустая() Тогда 
			
			Если ТипРазъединителя=Справочники.ТипыРазъединителя.РЛНД04 Тогда
				
				ИмяТипа = "Разъединитель_РЛНД04";
				
			ИначеЕсли ТипРазъединителя=Справочники.ТипыРазъединителя.РЛНД10 Тогда
				
				ИмяТипа = "Разъединитель_РЛНД10";
				
				Если ТекЗначение.ХарактеристикаРазъединителя = Перечисления.ХарактеристикиРазъединителей.ЗаземляющиеНожи Тогда 
					
					ИмяТипа = "Разъединитель_РЛНД10_ЗаземляющиеНожи";
					
				ИначеЕсли ТекЗначение.ХарактеристикаРазъединителя = Перечисления.ХарактеристикиРазъединителей.ЗапретОперацийПодНагрузкой Тогда 
					
					ИмяТипа = "Разъединитель_РЛНД10_ЗапретОперацийПодНагрузкой";
					
				ИначеЕсли ТекЗначение.ХарактеристикаРазъединителя = Перечисления.ХарактеристикиРазъединителей.ОперативныйРазрыв Тогда 
					
					ИмяТипа = "Разъединитель_РЛНД10_Оперативный_Разрыв";
					
				КонецЕсли;
				
			КонецЕсли;
			
			СтруктураФигурыПодч = ОписаниеФигуры();
			
			СтруктураФигурыПодч.Отображение = Фигура;
			СтруктураФигурыПодч.ИмяТипа = ИмяТипа;
			СтруктураФигурыПодч.Data1 = ИмяТипа+"_"+СтруктураФигуры.Data1;
			СтруктураФигурыПодч.Data2 = СтруктураФигуры.Data2;
			СтруктураФигурыПодч.ПоложениеХ = СтрЗаменить(Строка(1+ПоложениеХ)+" мм", Символы.НПП, "");
			СтруктураФигурыПодч.ПоложениеY = СтрЗаменить(Строка(1+ПоложениеY)+" мм", Символы.НПП, "");
			СтруктураФигурыПодч.Значение = ТекЗначение;
			СтруктураФигурыПодч.РодительскийЭлемент = СтруктураФигуры.Data1;			
			
			СтруктураФигуры.ПодчиненныеЭлементы.Добавить(СтруктураФигурыПодч.Data1);
			
			СозданныеФигуры.Вставить(СтруктураФигурыПодч.Data1, СтруктураФигурыПодч);
			
		КонецЕсли;
		
		#КонецОбласти
		
		#Область ТипРазрядника
		
		ТипРазрядника = ТекЗначение.ТипРазрядника;	
		Если Не ТипРазрядника.Пустая() Тогда 
			
			Если ТипРазрядника = Справочники.ТипыРазрядника.Вентильный Тогда 
				
				ИмяТипа = "ВентильныйРазрядник";
				
			ИначеЕсли ТипРазрядника = Справочники.ТипыРазрядника.ОПН Тогда 
				
				ИмяТипа = "ОПНРазрядник";
				
			ИначеЕсли ТипРазрядника = Справочники.ТипыРазрядника.Трубчатый Тогда
				
				ИмяТипа = "ТрубчатыйРазрядник";
				
			КонецЕсли;
			
			СтруктураФигурыПодч = Новый Структура;
			
			СтруктураФигурыПодч.Отображение = Фигура;
			СтруктураФигурыПодч.ИмяТипа = ИмяТипа;
			СтруктураФигурыПодч.Data1 = ИмяТипа+"_"+СтруктураФигуры.Data1;
			СтруктураФигурыПодч.Data2 = СтруктураФигуры.Data2;
			СтруктураФигурыПодч.ПоложениеХ = СтрЗаменить(Строка(8+ПоложениеХ)+" мм", Символы.НПП, "");
			СтруктураФигурыПодч.ПоложениеY = СтрЗаменить(Строка(-8+ПоложениеY)+" мм", Символы.НПП, "");
			СтруктураФигурыПодч.Значение = ТекЗначение;
			СтруктураФигурыПодч.РодительскийЭлемент = СтруктураФигуры.Data1;			
			
			СтруктураФигуры.ПодчиненныеЭлементы.Добавить(СтруктураФигурыПодч.Data1);
			
			СозданныеФигуры.Вставить(СтруктураФигурыПодч.Data1, СтруктураФигурыПодч);
			
		КонецЕсли;
		
		#КонецОбласти
		
		#Область СветильникУличногоОсвещения
		
		Если ТекЗначение.СветильникУличногоОсвещения Тогда 
			
			СтруктураФигурыПодч = Новый Структура;
			
			СтруктураФигурыПодч.Отображение = Фигура;
			СтруктураФигурыПодч.ИмяТипа = "СветильникУличногоОсвещения";
			СтруктураФигурыПодч.Data1 = "СветильникУличногоОсвещения_" + СтруктураФигуры.Data1;
			СтруктураФигурыПодч.Data2 = СтруктураФигуры.Data2;
			СтруктураФигурыПодч.ПоложениеХ = СтрЗаменить(Строка(-8+ПоложениеХ)+" мм", Символы.НПП, "");
			СтруктураФигурыПодч.ПоложениеY = СтрЗаменить(Строка(-8+ПоложениеY)+" мм", Символы.НПП, "");
			СтруктураФигурыПодч.Значение = ТекЗначение;
			СтруктураФигурыПодч.РодительскийЭлемент = СтруктураФигуры.Data1;			
			
			СтруктураФигуры.ПодчиненныеЭлементы.Добавить(СтруктураФигурыПодч.Data1);
			
			СозданныеФигуры.Вставить(СтруктураФигурыПодч.Data1, СтруктураФигурыПодч);
			
		КонецЕсли;
		
		#КонецОбласти
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОписаниеФигуры() Экспорт
	
	СтруктураФигуры = Новый Структура;
	
	СтруктураФигуры.Вставить("Отображение", Неопределено);
	СтруктураФигуры.Вставить("ИмяТипа", Неопределено);
	СтруктураФигуры.Вставить("Инициализирована", Неопределено);
	СтруктураФигуры.Вставить("РодительскийЭлемент", Неопределено);
	СтруктураФигуры.Вставить("Значение", Неопределено);
	СтруктураФигуры.Вставить("ФормаЭлемента", Неопределено);
	СтруктураФигуры.Вставить("ПоложениеХ", Неопределено);
	СтруктураФигуры.Вставить("ПоложениеY", Неопределено);
	СтруктураФигуры.Вставить("COMОбъект", Неопределено);
	СтруктураФигуры.Вставить("COMОбъектID", Неопределено);
	СтруктураФигуры.Вставить("Data1", Неопределено);
	СтруктураФигуры.Вставить("Data2", Неопределено);
	СтруктураФигуры.Вставить("Data3", Неопределено);
	СтруктураФигуры.Вставить("CustomProperty", Неопределено);
	
	СтруктураФигуры.Вставить("МассивСвойств", Новый Соответствие);
	СтруктураФигуры.Вставить("ПодчиненныеЭлементы", Новый Массив);
	СтруктураФигуры.Вставить("МассивСвязей", Новый Массив);
	
	СтруктураФигуры.Вставить("СчетчикиСсылок", Новый Массив);
	
	СтруктураФигуры.Вставить("Text", "");
	СтруктураФигуры.Вставить("Name", "");
	
	СтруктураФигуры.Вставить("Удалена", Ложь);
	СтруктураФигуры.Вставить("ЭтоДинамическаяФигура", Ложь);
	
	Возврат СтруктураФигуры;
	
КонецФункции

&НаСервере
Функция ЭтоДинамическаяЛиния(ИмяТипа)
	
	МассивТиповЛиний = МассивТиповЛиний();
	
	Индекс = МассивТиповЛиний.Найти("Линия");
	
	МассивТиповЛиний.Удалить(Индекс);
	
	Возврат Не (МассивТиповЛиний.Найти(ИмяТипа)=Неопределено);
	
КонецФункции

&НаСервере
Функция СоздатьСтруктуруФигуры(Фигура, Объект) Экспорт
	
	Если Фигура=Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураФигуры = ОписаниеФигуры();
	
	ПредставлениеПоляПоиска = ДополнитьПредставление(Фигура);
	
	СтруктураФигуры.Отображение = Фигура;
	СтруктураФигуры.ИмяТипа = Фигура.ИмяТипа;
	СтруктураФигуры.Data1 = Строка(Фигура.УникальныйИдентификатор());
	СтруктураФигуры.Data2 = ПредставлениеПоляПоиска;
	СтруктураФигуры.Значение = Фигура.Значение;
	СтруктураФигуры.ФормаЭлемента = ФормаЭлемента(Фигура);
	СтруктураФигуры.ЭтоДинамическаяФигура = ЭтоДинамическаяЛиния(Фигура.ИмяТипа);
	
	Text = ПолучитьЗначениеСвойства(Фигура, "Text"); 
	СтруктураФигуры.Text = Text;
	
	Name = ПолучитьЗначениеСвойства(Фигура, "Name"); 
	СтруктураФигуры.Name = Name;
	
	МассивСвойств = РегистрыСведений.ИнтеграцияВизиоЗначенияСвойствФигур.ПолучитьЗначениеСвойствИзМассива(Фигура, ПолучитьМассивСвойств()); 
	
	Для Каждого ТекСтрока Из МассивСвойств Цикл
		
		СтруктураФигуры.МассивСвойств.Вставить(ТекСтрока.ИмяСвойства, ТекСтрока.Значение);
		
	КонецЦикла;
	
	//СтруктураФигуры.МассивСвойств = МассивСвойств;
	
	МассивСвязей = ПолучитьМассивСвязей(Фигура);
	СтруктураФигуры.МассивСвязей = МассивСвязей;
	
	//ЗаполнитьДополнительныеСвойстваФигуры(СтруктураФигуры);
	
	Возврат СтруктураФигуры;
	
КонецФункции

&НаСервере
Функция ПолучитьМассивСвязей(Фигура)
	
	МассивСвязей = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктураСвязей.Индекс КАК Индекс,
	|	СтруктураСвязей.Элемент КАК Элемент,
	|	СтруктураСвязей.Точка
	|ИЗ
	|	РегистрСведений.ИнтеграцияВизиоСтруктураСвязей.СрезПоследних(
	|			,
	|			Точка = &Фигура
	|				И НЕ Элемент.ПометкаУдаления) КАК СтруктураСвязей
	|
	|УПОРЯДОЧИТЬ ПО
	|	Индекс
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Фигура", Фигура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		
		Возврат МассивСвязей;
		
	КонецЕсли;
	
	ТаблицаСвязей = Новый ТаблицаЗначений;
	
	ТаблицаСвязей.Колонки.Добавить("ИндексНаФигуре");
	ТаблицаСвязей.Колонки.Добавить("Элемент");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Элемент.Пустая() Тогда 
			Продолжить;
		КонецЕсли;
		
		Нстрока = ТаблицаСвязей.Добавить();
		Нстрока.ИндексНаФигуре = Выборка.Индекс;
		Нстрока.Элемент = Строка(Выборка.Элемент.УникальныйИдентификатор());
		
	КонецЦикла;
	
	МассивСвязей = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаСвязей);

	Возврат МассивСвязей;
	
КонецФункции

&НаСервере
Функция СоздатьФигуру(Наименование, Значение, ИмяТипа, Объект, Текст) Экспорт
	
	Фигура = Справочники.ИнтеграцияВизиоФигуры.СоздатьФигуру(Наименование, Значение, ИмяТипа, Объект);
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		
		ИзменитьСвойствоФигуры(Фигура, "Text", Текст);
		
	КонецЕсли;
	
	Возврат Фигура;
	
КонецФункции

&НаСервере
Процедура ДобавитьСвязь(Точка, Элемент, Индекс, Загрузка = Ложь) Экспорт
	
	РегистрыСведений.ИнтеграцияВизиоСтруктураСвязей.ДобавитьЗапись(Точка, Элемент, Индекс, Загрузка);

КонецПроцедуры

&НаСервере
Функция ПолучитьСсылку(Данные, ИмяТипа) Экспорт
	
	Если ЗначениеЗаполнено(Данные) Тогда 
		
		Возврат Справочники[ИмяТипа].ПолучитьСсылку(Новый УникальныйИдентификатор(Данные));
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ПометитьНаУдаление(Ссылка, Схема) Экспорт
	
	Если Ссылка=Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектПоСсылке = Ссылка.ПолучитьОбъект();
	
	ОбъектПоСсылке.УстановитьПометкуУдаления(Истина);
	
	ОбъектПоСсылке.Записать();
	
	ИзменитьСчетчикСсылок(Схема, (-1));
	
	ОбновитьСерверныйКэш(Схема, Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСчетчикСсылок(Схема, Значение) Экспорт
	
	ТекСчетчик = РегистрыСведений.ИнтеграцияВизиоСчетчикиСсылокФигурОбъектов.ПолучитьСчетчикСсылок(Схема);
	
	РегистрыСведений.ИнтеграцияВизиоСчетчикиСсылокФигурОбъектов.ДобавитьЗапись(Схема, (ТекСчетчик+Значение));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеФигуры(Фигура, Значение) Экспорт
	
	ИмяТипа = ОпределитьТипПоЗначению(Значение);

	ОбъектФигура = Фигура.ПолучитьОбъект();
	
	//ОбъектФигура.ИмяТипа = ИмяТипа;
	ОбъектФигура.Наименование = Значение.Наименование;
	ОбъектФигура.Значение = Значение;
	
	ОбъектФигура.Записать();
	
	ОбновиьТекстПоЗначению(Фигура, Значение);
	
КонецПроцедуры

&НаСервере
Процедура ОбновиьТекстПоЗначению(Фигура, Значение) Экспорт
	
	ИзменитьСвойствоФигуры(Фигура, "Text", Значение.Наименование); 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеСвойства(Фигура, ИмяСвойства) Экспорт 
	
	Возврат РегистрыСведений.ИнтеграцияВизиоЗначенияСвойствФигур.ПолучитьЗначениеСвойства(Фигура, ИмяСвойства);
	
КонецФункции

&НаСервере
Процедура ИзменитьСвойствоФигуры(Фигура, Свойство, Значение, Загрузка = Ложь) Экспорт
	
	РегистрыСведений.ИнтеграцияВизиоЗначенияСвойствФигур.ДобавитьЗапись(Фигура, Свойство, Значение, Загрузка);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвойствоФигуры(Фигура, Свойство, Значение = Неопределено, Загрузка = Истина) Экспорт
	
	РегистрыСведений.ИнтеграцияВизиоЗначенияСвойствФигур.УдалитьЗапись(Фигура, Свойство, Значение, Загрузка);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьФигуру(Значение = Неопределено, ИмяТипа = "", Объект = Неопределено) Экспорт
	
	Фигура = Неопределено;
	
	Наименование = "Неопределено";
	
	Текст = "";
	
	Если ЗначениеЗаполнено(Значение) Тогда 
		
		Фигура = Справочники.ИнтеграцияВизиоФигуры.ПолучитьФигуруПоОбъекту(Значение, ИмяТипа, Объект);
		
		Если Не Фигура=Неопределено Тогда 
			
			Возврат Фигура;
			
		КонецЕсли;
		
		Наименование = Строка(Значение.УникальныйИдентификатор()); 
		
		Текст = Значение.Наименование;
		
	КонецЕсли;
	
	Фигура = СоздатьФигуру(Наименование, Значение, ИмяТипа, Объект, Текст);
	
	ИзменитьСчетчикСсылок(Объект, 1);
	
	Возврат Фигура;
	
КонецФункции	

#Область РазрешеноРедактированиеСхем

&НаСервере
Функция	ТолькоЧтение(Объект) Экспорт
	
	ТолькоЧтение = Не РазрешеноРедактированиеСхем();
	Если Не ТолькоЧтение Тогда 

		ОбъектЕстьВРегистре = РегистрыСведений.ИнтеграцияВизиоРедактируемыеОбъекты.ОбъектЕстьВРегистре(Объект);		
		Если ОбъектЕстьВРегистре Тогда
			
			Пользователь = Пользователи.ТекущийПользователь();

			ТолькоЧтение = Не (РегистрыСведений.ИнтеграцияВизиоРедактируемыеОбъекты.ОбъектРедактируетсяПользователем(Объект, Пользователь));
			
		Иначе
			
			УстановитьТолькоЧтение(Объект);
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТолькоЧтение;
	
КонецФункции

&НаСервере
Функция	РазрешеноРедактированиеСхем() Экспорт
	
	РазрешеноРедактированиеСхем = РольДоступна("ИнтеграцияВизиоРедактированиеСхем") или РольДоступна("ПолныеПрава");
	
	Возврат РазрешеноРедактированиеСхем;
	
КонецФункции

&НаСервере
Процедура УстановитьТолькоЧтение(Объект) Экспорт
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	РегистрыСведений.ИнтеграцияВизиоРедактируемыеОбъекты.ДобавитьЗапись(Объект, Пользователь);
	
КонецПроцедуры

&НаСервере
Процедура СнятьТолькоЧтение(Объект) Экспорт
	
	Если Не ЗначениеЗаполнено(Объект) Тогда 
		Возврат;
	КонецЕсли;
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	РегистрыСведений.ИнтеграцияВизиоРедактируемыеОбъекты.УдалитьЗапись(Объект, Пользователь);
	
КонецПроцедуры	

#КонецОбласти

#Область ОбработкаПодписок

//Используется для (авто)создания\изменения фигуры на основании объекта по типам
&НаСервере
Процедура ПриЗаписиЗначенияФигуры(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	//фигура создана в конструкторе схем, но еще не привязана к объекту, см в обработке оповещения
	ЗаписьИзФормыВизио = Источник.ДополнительныеСвойства.Свойство("ЗаписьИзФормыВизио");
	Если ЗаписьИзФормыВизио Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяТипа = ОпределитьТипПоЗначению(Источник.Ссылка);
	Если Не ЗначениеЗаполнено(ИмяТипа) Тогда 
		Возврат;
	КонецЕсли;
	
	Наименование = Источник.Наименование;
	Текст = Источник.Наименование;
	
	Объект = Неопределено;
	Если ТипЗнч(Источник)=Тип("СправочникОбъект.Опоры") Тогда 
		
		Объект = Источник.УзелСети;
		
	ИначеЕсли ТипЗнч(Источник)=Тип("СправочникОбъект.УзлыСети") Тогда
		
		Объект = Источник.Ссылка;
		
	ИначеЕсли ТипЗнч(Источник)=Тип("СправочникОбъект.ПроизвольныеТочкиУзлаСети") Тогда
		
		Объект = Источник.УзелСети;
		
	ИначеЕсли ТипЗнч(Источник)=Тип("СправочникОбъект.УчасткиВоздушныхЛиний") Тогда
		
		Объект = Источник.УзелСети;
		
		Текст = "М: " + Источник.Марка + " К: " + Источник.КоличествоПроводов + " Д: " + Источник.Длина; 
		
	КонецЕсли;
	
	Если Объект = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	//ИмяТипа уже мог изменится ищем по значению и схеме
	Фигура = Справочники.ИнтеграцияВизиоФигуры.ПолучитьФигуруПоЗначениюИСхеме(Источник.Ссылка, Объект);
	
	//новая
	Если Фигура=Неопределено Тогда 
		
		Фигура = СоздатьФигуру(Наименование, Источник.Ссылка, ИмяТипа, Объект, Текст);
		
	Иначе
		
		ОбъектТекФигура = Фигура.ПолучитьОбъект();
		
		ОбъектТекФигура.ИмяТипа = ИмяТипа;
		ОбъектТекФигура.Наименование = Наименование;
		
		ОбъектТекФигура.Записать();
		
		ИзменитьСвойствоФигуры(Фигура, "Text", Текст);
		
	КонецЕсли;
	
КонецПроцедуры

//Очистка серверного кэша
&НаСервере
Процедура ИнтеграцияВизиоПриЗаписиСвойств(Источник, Отказ, Замещение) Экспорт
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда 
		Возврат;
	КонецЕсли;
	
	Элемент = Источник.Отбор.Элемент;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнтеграцияВизиоФигурыОбъектовСрезПоследних.Объект,
	|	ИнтеграцияВизиоСерверныйКэш.КэшСхемы
	|ИЗ
	|	РегистрСведений.ИнтеграцияВизиоФигурыОбъектов.СрезПоследних(, Элемент = &Элемент) КАК ИнтеграцияВизиоФигурыОбъектовСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнтеграцияВизиоСерверныйКэш КАК ИнтеграцияВизиоСерверныйКэш
	|		ПО ИнтеграцияВизиоФигурыОбъектовСрезПоследних.Объект = ИнтеграцияВизиоСерверныйКэш.Объект
	|ГДЕ
	|	НЕ ИнтеграцияВизиоСерверныйКэш.КэшСхемы ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("Элемент", Элемент.Значение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ОбновитьСерверныйКэш(ВыборкаДетальныеЗаписи.Объект, Неопределено);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Назначение_АРМ_УправленияСетью

&НаСервере
Функция ОпределитьТипПоЗначению(СсылкаНаОбъект) Экспорт
	
	ИмяТипа = "";
	
	Если ТипЗнч(СсылкаНаОбъект)=Тип("СправочникСсылка.Опоры") Тогда 
		
		Если СсылкаНаОбъект.Тип=Перечисления.ТипОпоры.ЖБ Тогда 
			
			ИмяТипа = "Опора_Тип_ЖБ";
			
			Если СсылкаНаОбъект.ДвойноеКрепление Тогда 
				
				ИмяТипа = "Опора_Тип_ЖБ_Двойное_Крепление";
				
			ИначеЕсли СсылкаНаОбъект.Анкерная Тогда 
				
				ИмяТипа = "Опора_Тип_ЖБ_Анкер";
				
				Если СсылкаНаОбъект.Укос Тогда 
					
					ИмяТипа = "Опора_Тип_ЖБ_Анкер_Укос";
					
				КонецЕсли;
				
			ИначеЕсли СсылкаНаОбъект.СовместныйПодвес Тогда 
				
				ИмяТипа = "Опора_Тип_ЖБ_Совместный_Подвес";
				
			КонецЕсли;
			
		ИначеЕсли СсылкаНаОбъект.Тип=Перечисления.ТипОпоры.Деревянная Тогда
			
			ИмяТипа = "Опора_Тип_Деревянная";
			
			Если СсылкаНаОбъект.ЖБПриставка Тогда 
				
				ИмяТипа = "Опора_Тип_Деревянная_ЖБ_Приставка";
				
				Если СсылкаНаОбъект.Анкерная Тогда
					
					ИмяТипа = "Опора_Тип_Деревянная_ЖБ_Приставка_Анкер";
					
				КонецЕсли;
				
			ИначеЕсли СсылкаНаОбъект.Анкерная Тогда
				
				ИмяТипа = "Опора_Тип_Деревянная_Анкер";
				
			КонецЕсли;
			
		ИначеЕсли СсылкаНаОбъект.Тип=Перечисления.ТипОпоры.Металлическая Тогда
			
			ИмяТипа = "Опора_Тип_Металлическая";
			
			Если СсылкаНаОбъект.Анкерная Тогда
				
				ИмяТипа = "Опора_Тип_Металлическая_Анкер";
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СсылкаНаОбъект)=Тип("СправочникСсылка.УзлыСети") Тогда 
		
		ВидЭлементаСетиРодителя = СсылкаНаОбъект.ВидЭлементаСети; 
		
		Если ВидЭлементаСетиРодителя = Справочники.ВидыЭлементовИнженернойСети.Подстанция Тогда 
			
			ИмяТипа = "ПСНапряжением35КВ";
			
		ИначеЕсли ВидЭлементаСетиРодителя = Справочники.ВидыЭлементовИнженернойСети.ТП
			или ВидЭлементаСетиРодителя = Справочники.ВидыЭлементовИнженернойСети.РП Тогда
			
			ИмяТипа = "УзелСетиТП";
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СсылкаНаОбъект)=Тип("СправочникСсылка.ПроизвольныеТочкиУзлаСети") Тогда 
		
		ИмяТипа = "ПроизвольныеТочкиУзлаСети";
		
	ИначеЕсли ТипЗнч(СсылкаНаОбъект)=Тип("СправочникСсылка.УчасткиВоздушныхЛиний") Тогда 
		
		ИмяТипа = "Динамическая соединительная линия";
		
	КонецЕсли;
	
	Возврат ИмяТипа;
	
КонецФункции

//Не используется
&НаСервере
Функция ПолучитьМассивТиповДляСозданияФигур()
	
	МассивТипов = Новый Массив;
	
	МассивТипов.Добавить(Тип("СправочникОбъект.Опоры"));
	МассивТипов.Добавить(Тип("СправочникОбъект.УзлыСети"));
	МассивТипов.Добавить(Тип("СправочникОбъект.ПроизвольныеТочкиУзлаСети"));
	
	МассивТипов.Добавить(Тип("СправочникСсылка.Опоры"));
	МассивТипов.Добавить(Тип("СправочникСсылка.УзлыСети"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ПроизвольныеТочкиУзлаСети"));

	Возврат МассивТипов;
	
КонецФункции

//Не используется
&НаСервере
Функция СформироватьДополнительныеСвойстваФигуры(Фигура)
	
	ДополнительныеСвойства = Новый Соответствие;
	
	//Если ТипЗнч(Фигура)=Тип("СправочникСсылка.ИнтеграцияВизиоФигуры") Тогда  
		
		Ссылка = Фигура.Значение;
		
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Опоры") Тогда 
			
			ДополнительныеСвойства.Вставить("Тип", Строка(Ссылка.Тип));
			ДополнительныеСвойства.Вставить("ЖБПриставка", Строка(Ссылка.ЖБПриставка));
			ДополнительныеСвойства.Вставить("ДатаПриставки", Строка(Ссылка.ДатаПриставки));
			ДополнительныеСвойства.Вставить("Пропитанная", Строка(Ссылка.Пропитанная));
			ДополнительныеСвойства.Вставить("Укос", Строка(Ссылка.Укос));
			ДополнительныеСвойства.Вставить("ДатаУкоса", Строка(Ссылка.ДатаУкоса));
			ДополнительныеСвойства.Вставить("ЖБУкоса", Строка(Ссылка.ЖБУкоса));
			ДополнительныеСвойства.Вставить("ДатаПриставкиУкоса", Строка(Ссылка.ДатаПриставкиУкоса));
			ДополнительныеСвойства.Вставить("Анкерная", Строка(Ссылка.Анкерная));
			ДополнительныеСвойства.Вставить("Заземление", Строка(Ссылка.Заземление));
			ДополнительныеСвойства.Вставить("Подставная", Строка(Ссылка.Подставная));
			ДополнительныеСвойства.Вставить("ТипРазрядника", Строка(Ссылка.ТипРазрядника));
			ДополнительныеСвойства.Вставить("ДатаРазрядника", Строка(Ссылка.ДатаРазрядника));
			ДополнительныеСвойства.Вставить("ТипРазъединителя", Строка(Ссылка.ТипРазъединителя));
			ДополнительныеСвойства.Вставить("ДатаРазъединителя", Строка(Ссылка.ДатаРазъединителя));
			ДополнительныеСвойства.Вставить("Высоковольтная", Строка(Ссылка.Высоковольтная));
			ДополнительныеСвойства.Вставить("ИмущественныеОтношения", Строка(Ссылка.ИмущественныеОтношения));
			ДополнительныеСвойства.Вставить("ИнвентарныйНомер", Строка(Ссылка.ИнвентарныйНомер));
			ДополнительныеСвойства.Вставить("ИД_РаспредСети", Строка(Ссылка.ИД_РаспредСети));
			ДополнительныеСвойства.Вставить("ДатаУстановки", Строка(Ссылка.ДатаУстановки));
			ДополнительныеСвойства.Вставить("МонтажСтороннимиСилами", Строка(Ссылка.МонтажСтороннимиСилами));
			ДополнительныеСвойства.Вставить("КоличествоПроводовНаОпоре", Строка(Ссылка.КоличествоПроводовНаОпоре));
			ДополнительныеСвойства.Вставить("ДвойноеКрепление", Строка(Ссылка.ДвойноеКрепление));
			ДополнительныеСвойства.Вставить("Шлейф", Строка(Ссылка.Шлейф));
			ДополнительныеСвойства.Вставить("КоличествоИзоляторов", Строка(Ссылка.КоличествоИзоляторов));
			ДополнительныеСвойства.Вставить("УзелСети", Строка(Ссылка.УзелСети));
			ДополнительныеСвойства.Вставить("Автор", Строка(Ссылка.Автор));
			ДополнительныеСвойства.Вставить("ДатаРедактирования", Строка(Ссылка.ДатаРедактирования));
			ДополнительныеСвойства.Вставить("СовместныйПодвес", Строка(Ссылка.СовместныйПодвес));
			ДополнительныеСвойства.Вставить("СветильникУличногоОсвещения", Строка(Ссылка.СветильникУличногоОсвещения));
			ДополнительныеСвойства.Вставить("ХарактеристикаРазъединителя", Строка(Ссылка.ХарактеристикаРазъединителя));
			
		КонецЕсли;
		
	//КонецЕсли;
	
	Возврат ДополнительныеСвойства; 
	
КонецФункции

&НаСервере
Функция ОпределитьСтруктуруТипаСсылкиПоТипуФигуры(Данные, УзелСети) Экспорт

	СтрукутураТипа = Неопределено;
	
	ТипыОпор = Новый Массив;
	ТипыОпор.Добавить("Опора_Тип_ЖБ");
	ТипыОпор.Добавить("Опора_Тип_ЖБ_Двойное_Крепление");
	ТипыОпор.Добавить("Опора_Тип_ЖБ_Анкер");
	ТипыОпор.Добавить("Опора_Тип_ЖБ_Анкер_Укос");
	ТипыОпор.Добавить("Опора_Тип_ЖБ_Совместный_Подвес");
	ТипыОпор.Добавить("Опора_Тип_Деревянная");
	ТипыОпор.Добавить("Опора_Тип_Деревянная_ЖБ_Приставка");
	ТипыОпор.Добавить("Опора_Тип_Деревянная_ЖБ_Приставка_Анкер");
	ТипыОпор.Добавить("Опора_Тип_Деревянная_Анкер");
	ТипыОпор.Добавить("Опора_Тип_Металлическая_Анкер");
	ТипыОпор.Добавить("Опора_Тип_Металлическая");
	
	ТипыУзлыСети = Новый Массив;
	ТипыУзлыСети.Добавить("УзелСетиТП");
	ТипыУзлыСети.Добавить("ПСНапряжением35КВ");
	ТипыУзлыСети.Добавить("УзелСетиТП_Мачтовая");
	
	ТипыПроизвольныеТочкиУзлаСети = Новый Массив;
	ТипыПроизвольныеТочкиУзлаСети.Добавить("ПроизвольныеТочкиУзлаСети");
	
	ТипыУчастковЛиний = МассивТиповЛиний();
	  
	Если Не ТипыОпор.Найти(Данные)=Неопределено Тогда 
		
		ФормаЭлемента = "Справочник.Опоры.Форма.ФормаЭлемента";
		ФормаСписка = "Справочник.Опоры.ФормаВыбора";
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("УзелСети", УзелСети);
	
		Если Данные= "Опора_Тип_ЖБ" Тогда 
			
			ЗначенияЗаполнения.Вставить("Тип", Перечисления.ТипОпоры.ЖБ);
			
		ИначеЕсли Данные= "Опора_Тип_ЖБ_Двойное_Крепление" Тогда
			
			ЗначенияЗаполнения.Вставить("Тип", Перечисления.ТипОпоры.ЖБ);
			ЗначенияЗаполнения.Вставить("ДвойноеКрепление", Истина);
			
		ИначеЕсли Данные= "Опора_Тип_ЖБ_Анкер" Тогда
			
			ЗначенияЗаполнения.Вставить("Тип", Перечисления.ТипОпоры.ЖБ);
			ЗначенияЗаполнения.Вставить("Анкерная", Истина);
			
		ИначеЕсли Данные= "Опора_Тип_ЖБ_Анкер_Укос" Тогда
			
			ЗначенияЗаполнения.Вставить("Тип", Перечисления.ТипОпоры.ЖБ);
			ЗначенияЗаполнения.Вставить("Анкерная", Истина);
			
		ИначеЕсли Данные= "Опора_Тип_ЖБ_Совместный_Подвес" Тогда
			
			ЗначенияЗаполнения.Вставить("Тип", Перечисления.ТипОпоры.ЖБ);
			ЗначенияЗаполнения.Вставить("СовместныйПодвес", Истина);
			
		ИначеЕсли Данные= "Опора_Тип_Деревянная" Тогда
			
			ЗначенияЗаполнения.Вставить("Тип", Перечисления.ТипОпоры.Деревянная);
			
		ИначеЕсли Данные= "Опора_Тип_Деревянная_ЖБ_Приставка" Тогда
			
			ЗначенияЗаполнения.Вставить("Тип", Перечисления.ТипОпоры.Деревянная);
			ЗначенияЗаполнения.Вставить("ЖБПриставка", Истина);
			
		ИначеЕсли Данные= "Опора_Тип_Деревянная_ЖБ_Приставка_Анкер" Тогда
			
			ЗначенияЗаполнения.Вставить("Тип", Перечисления.ТипОпоры.Деревянная);
			ЗначенияЗаполнения.Вставить("Анкерная", Истина);
			ЗначенияЗаполнения.Вставить("ЖБПриставка", Истина);
			
		ИначеЕсли Данные= "Опора_Тип_Деревянная_Анкер" Тогда
			
			ЗначенияЗаполнения.Вставить("Тип", Перечисления.ТипОпоры.Деревянная);
			ЗначенияЗаполнения.Вставить("Анкерная", Истина);
			
		ИначеЕсли Данные= "Опора_Тип_Металлическая_Анкер" Тогда
			
			ЗначенияЗаполнения.Вставить("Тип", Перечисления.ТипОпоры.Металлическая);
			ЗначенияЗаполнения.Вставить("Анкерная", Истина);
			
		ИначеЕсли Данные= "Опора_Тип_Металлическая" Тогда
			
			ЗначенияЗаполнения.Вставить("Тип", Перечисления.ТипОпоры.Металлическая);

		КонецЕсли;
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		СтрукутураТипа = Новый Структура;
		
		СтрукутураТипа.Вставить("ПараметрыОткрытия", ПараметрыОткрытия);
		СтрукутураТипа.Вставить("ФормаЭлемента", ФормаЭлемента);
		СтрукутураТипа.Вставить("ФормаСписка", ФормаСписка);
		СтрукутураТипа.Вставить("ИмяТипа", "Опоры");
		
		МассивТипов = Новый Массив;
		
		МассивТипов.Добавить(Тип("СправочникСсылка.Опоры"));

		СтрукутураТипа.Вставить("МассивТипов", МассивТипов);
		
	ИначеЕсли Не ТипыУзлыСети.Найти(Данные)=Неопределено Тогда 
		
		ЗначенияЗаполнения = Новый Структура;
		//ЗначенияЗаполнения.Вставить("Родитель", УзелСети.Родитель);

		ФормаЭлемента = "Справочник.УзлыСети.Форма.ФормаЭлемента";
		ФормаСписка = "Справочник.УзлыСети.ФормаВыбора";
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		СтрукутураТипа = Новый Структура;
		
		ЗначенияЗаполнения.Вставить("Ссылка", УзелСети);
		
		СтрукутураТипа.Вставить("ПараметрыОткрытия", ПараметрыОткрытия);
		СтрукутураТипа.Вставить("ФормаЭлемента", ФормаЭлемента);
		СтрукутураТипа.Вставить("ФормаСписка", ФормаСписка);

		СтрукутураТипа.Вставить("ИмяТипа", "УзлыСети");
		
		МассивТипов = Новый Массив;
		
		МассивТипов.Добавить(Тип("СправочникСсылка.УзлыСети"));

		СтрукутураТипа.Вставить("МассивТипов", МассивТипов);
		
	ИначеЕсли Не ТипыПроизвольныеТочкиУзлаСети.Найти(Данные)=Неопределено Тогда 
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("УзелСети", УзелСети);
		
		ФормаЭлемента = "Справочник.ПроизвольныеТочкиУзлаСети.Форма.ФормаЭлемента";
		ФормаСписка = "Справочник.ПроизвольныеТочкиУзлаСети.ФормаВыбора";
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		ЗначенияЗаполнения.Вставить("УзелСети", УзелСети);
		
		СтрукутураТипа = Новый Структура;
		
		СтрукутураТипа.Вставить("ПараметрыОткрытия", ПараметрыОткрытия);
		СтрукутураТипа.Вставить("ФормаЭлемента", ФормаЭлемента);
		СтрукутураТипа.Вставить("ФормаСписка", ФормаСписка);
		СтрукутураТипа.Вставить("ИмяТипа", "ПроизвольныеТочкиУзлаСети");
		
		МассивТипов = Новый Массив;
		
		МассивТипов.Добавить(Тип("СправочникСсылка.ПроизвольныеТочкиУзлаСети"));
		
		СтрукутураТипа.Вставить("МассивТипов", МассивТипов);
		
	ИначеЕсли Не ТипыУчастковЛиний.Найти(Данные)=Неопределено Тогда 
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("УзелСети", УзелСети);
		
		ФормаЭлемента = "Справочник.УчасткиВоздушныхЛиний.Форма.ФормаЭлемента";
		ФормаСписка = "Справочник.УчасткиВоздушныхЛиний.ФормаВыбора";
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		ЗначенияЗаполнения.Вставить("УзелСети", УзелСети);
		
		СтрукутураТипа = Новый Структура;
		
		СтрукутураТипа.Вставить("ПараметрыОткрытия", ПараметрыОткрытия);
		СтрукутураТипа.Вставить("ФормаЭлемента", ФормаЭлемента);
		СтрукутураТипа.Вставить("ФормаСписка", ФормаСписка);
		СтрукутураТипа.Вставить("ИмяТипа", "УчасткиВоздушныхЛиний");
		
		МассивТипов = Новый Массив;
		
		МассивТипов.Добавить(Тип("СправочникСсылка.УчасткиВоздушныхЛиний"));
		
		СтрукутураТипа.Вставить("МассивТипов", МассивТипов);
		
	КонецЕсли;
	
	Возврат СтрукутураТипа;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти